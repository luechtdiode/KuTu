# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
name: "Build-Pipeline"

on: [push]
#   branches: [master]
#  pull_request:
#    # The branches below must be a subset of the branches above
#    branches: [master]
#  schedule:
#    - cron: '0 9 * * 2'

jobs:
  build-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Setup NPM
        uses: actions/setup-node@v1
      - name: Build Mobile-App
        run: |
          cd newclient/resultcatcher
          npm install -g cordova ionic
          npm i
          ionic build --prod --engine=browser
          cd ../..
          rm -rf ./src/main/resources/app
          mkdir ./src/main/resources/app
          cp -R -f ./newclient/resultcatcher/www/* ./src/main/resources/app
      - name: Autocommit Client
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: update with generated Client from Github Actions CI for build ${{env.GITHUB_RUN_NUMBER}} with [skip ci]

  build-app:
    needs: build-client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Java Setup
        run: |
          . ./prepare_jdk.sh
          echo ::set-output name=JAVA_HOME::$(echo ${JAVA_HOME})
          echo ::set-output name=JRE_HOME::$(echo ${JRE_HOME})
          echo ::set-output name=PATH::$(echo ${PATH})
        env:
          OS: Linux
      - name: Maven Build
        run: |
          mvn clean install
        env:
          JAVA_HOME: ${{ steps.branch_name.outputs.JAVA_HOME }}
          JRE_HOME: ${{ steps.branch_name.outputs.JRE_HOME }}
          PATH: ${{ steps.branch_name.outputs.PATH }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: |
            target

  build-lnx-distribution:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Build Tags
        id: build_tags
        run: |
          echo ::set-output name=SHA_TAG::$(echo ${GITHUB_SHA})
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Java Setup
        run: |
          . ./prepare_jdk.sh
          echo ::set-output name=JAVA_HOME::$(echo ${JAVA_HOME})
          echo ::set-output name=JRE_HOME::$(echo ${JRE_HOME})
          echo ::set-output name=PATH::$(echo ${PATH})
        env:
          OS: Linux
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: target
      - name: Maven Build
        run: |
          mvn package
        env:
          JAVA_HOME: ${{ steps.branch_name.outputs.JAVA_HOME }}
          JRE_HOME: ${{ steps.branch_name.outputs.JRE_HOME }}
          PATH: ${{ steps.branch_name.outputs.PATH }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-app
          path: |
            target/*.deb
            target/*.rpm

  build-win64-distribution:
    needs: build-app
    runs-on: windows-latest
    steps:
      - name: Build Tags
        id: build_tags
        run: |
          echo ::set-output name=SHA_TAG::$(echo ${GITHUB_SHA})
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Java Setup
        run: |
          . ./prepare_jdk.sh
          echo ::set-output name=JAVA_HOME::$(echo ${JAVA_HOME})
          echo ::set-output name=JRE_HOME::$(echo ${JRE_HOME})
          echo ::set-output name=PATH::$(echo ${PATH})
        env:
          OS: Win64
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: target
      - name: Maven Build
        run: |
          mvn package
        env:
          JAVA_HOME: ${{ steps.branch_name.outputs.JAVA_HOME }}
          JRE_HOME: ${{ steps.branch_name.outputs.JRE_HOME }}
          PATH: ${{ steps.branch_name.outputs.PATH }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: win64-app
          path: |
            target/*.msi
            target/*.exe

  build-osx-distribution:
    needs: build-app
    runs-on: windows-latest
    steps:
      - name: Build Tags
        id: build_tags
        run: |
          echo ::set-output name=SHA_TAG::$(echo ${GITHUB_SHA})
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Java Setup
        id: jdk
        run: |
          . ./prepare_jdk.sh
          echo ::set-output name=JAVA_HOME::$(echo ${JAVA_HOME})
          echo ::set-output name=JRE_HOME::$(echo ${JRE_HOME})
          echo ::set-output name=PATH::$(echo ${PATH})
        env:
          OS: Darwin
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: target
      - name: Maven Build
        run: |
          mvn package
        env:
          JAVA_HOME: ${{ steps.branch_name.outputs.JAVA_HOME }}
          JRE_HOME: ${{ steps.branch_name.outputs.JRE_HOME }}
          PATH: ${{ steps.branch_name.outputs.PATH }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: osx-app
          path: |
            target/*.pkg
            target/*.dmg

  build-docker:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Build Tags
        id: build_tags
        run: |
          echo ::set-output name=SHA_TAG::$(echo ${GITHUB_SHA})
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: target
          
      - name: Build, Tag & Push Dockerfile
        run: |
          cp target/dependency/*.jar docker/libs/
          cp target/*.jar docker/
          rm docker/libs/javafx*.jar
          rm docker/*-app.jar
          echo ${{ secrets.DOCKER_ACCESSTOKEN }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin >/dev/null 2>&1
          docker build ./docker -t ${{secrets.IMAGE_NAME}}:latest
          docker tag ${{secrets.IMAGE_NAME}}:latest ${{secrets.IMAGE_NAME}}:$TAG
          docker push ${{secrets.IMAGE_NAME}}:latest
          docker push ${{secrets.IMAGE_NAME}}:$TAG
          echo "$TAG is built properly and pushed to Dockerhub"
        env:
          TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}

#  build-linux-binary:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - run: ./build-linux-binary.sh
#  build-win-binary:
#    needs: build
#    runs-on: windows-latest
#    steps:
#      - run: ./build-win-binary.sh
#  build-osx-binary:
#    needs: build
#    runs-on: macos-latest
#    steps:
#      - run: ./build-osx-binary.sh
