<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ch.seidel</groupId>
	<artifactId>KuTu</artifactId>
	<version>2.3.3</version>

	<inceptionYear>2014</inceptionYear>

	<profiles>
		<profile>
			<id>win</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<javafx.os>win</javafx.os>
				<bundler.os>Win64</bundler.os>
				<app.logo>app-logo.ico</app.logo>
				<bundler.type>msi</bundler.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>package-binary-distro</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${jdk-home}/bin/jpackage</executable>
									<arguments>
										<argument>--main-class</argument>
										<argument>ch.seidel.kutu.KuTuApp</argument>
										<argument>--type</argument>
										<argument>${bundler.type}</argument>
										<argument>--input</argument>
										<argument>${project.build.directory}/package</argument>
										<argument>--dest</argument>
										<argument>${project.build.directory}/${bundler.os}</argument>
										<argument>--name</argument>
										<argument>TurnerWettkampf-App-v${parsedVersion.majorVersion}r${parsedVersion.minorVersion}</argument>
										<argument>--app-version</argument>
										<argument>${app.version}</argument>
										<argument>--main-jar</argument>
										<argument>${project.artifactId}-${app.version}.jar</argument>
										<argument>--icon</argument>
										<argument>${project.build.sourceDirectory}/../resources/images/${app.logo}</argument>
										<argument>--copyright</argument>
										<argument>Interpolar</argument>
										<argument>--vendor</argument>
										<argument>Interpolar</argument>
										<argument>--win-dir-chooser</argument>
										<argument>--win-shortcut</argument>
										<argument>--win-per-user-install</argument>
										<argument>--win-menu</argument>
										<argument>--java-options</argument>
										<argument>"-DkutuAPPDIR=$APPDIR"</argument>
										<argument>--java-options</argument>
										<argument>
											--add-opens=java.base/java.lang=ALL-UNNAMED
											--add-opens=java.base/java.lang.invoke=ALL-UNNAMED
											--add-opens=java.base/java.net=ALL-UNNAMED
											--add-opens=java.base/java.nio=ALL-UNNAMED
											--add-opens=java.base/java.time=ALL-UNNAMED
											--add-opens=java.base/java.util=ALL-UNNAMED
											--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
											--add-opens=java.base/sun.nio.ch=ALL-UNNAMED
											--add-opens=java.base/sun.util.calendar=ALL-UNNAMED
										</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>osx</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<properties>
				<javafx.os>mac</javafx.os>
				<bundler.os>Darwin</bundler.os>
				<bundler.type>pkg</bundler.type>
				<app.logo>AppIcon.icns</app.logo>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>package-binary-distro</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${jdk-home}/bin/jpackage</executable>
									<arguments>
										<argument>--main-class</argument>
										<argument>ch.seidel.kutu.KuTuApp</argument>
										<argument>--type</argument>
										<argument>${bundler.type}</argument>
										<argument>--input</argument>
										<argument>${project.build.directory}/package</argument>
										<argument>--dest</argument>
										<argument>${project.build.directory}/${bundler.os}</argument>
										<argument>--name</argument>
										<argument>TurnerWettkampf-App-v${parsedVersion.majorVersion}r${parsedVersion.minorVersion}</argument>
										<argument>--app-version</argument>
										<argument>${app.version}</argument>
										<argument>--main-jar</argument>
										<argument>${project.artifactId}-${app.version}.jar</argument>
										<argument>--icon</argument>
										<argument>${project.build.sourceDirectory}/../resources/images/${app.logo}</argument>
										<argument>--copyright</argument>
										<argument>Interpolar</argument>
										<argument>--vendor</argument>
										<argument>Interpolar</argument>
										<argument>--mac-package-identifier</argument>
										<argument>ch.seidel.kutu.KuTuApp</argument>
										<argument>--java-options</argument>
										<argument>"-DkutuAPPDIR=$APPDIR"</argument>
										<argument>--java-options</argument>
										<argument>
											--add-opens=java.base/java.lang=ALL-UNNAMED
											--add-opens=java.base/java.lang.invoke=ALL-UNNAMED
											--add-opens=java.base/java.net=ALL-UNNAMED
											--add-opens=java.base/java.nio=ALL-UNNAMED
											--add-opens=java.base/java.time=ALL-UNNAMED
											--add-opens=java.base/java.util=ALL-UNNAMED
											--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
											--add-opens=java.base/sun.nio.ch=ALL-UNNAMED
											--add-opens=java.base/sun.util.calendar=ALL-UNNAMED
										</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>linux</family>
				</os>
			</activation>
			<properties>
				<javafx.os>linux</javafx.os>
				<bundler.os>Linux</bundler.os>
				<bundler.type>deb</bundler.type>
				<app.logo>app-logo.png</app.logo>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.1.0</version>
						<executions>
							<execution>
								<id>package-binary-distro</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>${jdk-home}/bin/jpackage</executable>
									<arguments>
										<argument>--main-class</argument>
										<argument>ch.seidel.kutu.KuTuApp</argument>
										<argument>--type</argument>
										<argument>${bundler.type}</argument>
										<argument>--input</argument>
										<argument>${project.build.directory}/package</argument>
										<argument>--dest</argument>
										<argument>${project.build.directory}/${bundler.os}</argument>
										<argument>--name</argument>
										<argument>TurnerWettkampf-App-v${parsedVersion.majorVersion}r${parsedVersion.minorVersion}</argument>
										<argument>--app-version</argument>
										<argument>${app.version}</argument>
										<argument>--main-jar</argument>
										<argument>${project.artifactId}-${app.version}.jar</argument>
										<argument>--icon</argument>
										<argument>${project.build.sourceDirectory}/../resources/images/${app.logo}</argument>
										<argument>--copyright</argument>
										<argument>Interpolar</argument>
										<argument>--vendor</argument>
										<argument>Interpolar</argument>
										<argument>--linux-shortcut</argument>
										<argument>--java-options</argument>
										<argument>"-DkutuAPPDIR=$APPDIR"</argument>
										<argument>--java-options</argument>
										<argument>
											--add-opens=java.base/java.lang=ALL-UNNAMED
											--add-opens=java.base/java.lang.invoke=ALL-UNNAMED
											--add-opens=java.base/java.net=ALL-UNNAMED
											--add-opens=java.base/java.nio=ALL-UNNAMED
											--add-opens=java.base/java.time=ALL-UNNAMED
											--add-opens=java.base/java.util=ALL-UNNAMED
											--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
											--add-opens=java.base/sun.nio.ch=ALL-UNNAMED
											--add-opens=java.base/sun.util.calendar=ALL-UNNAMED
										</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<properties>
		<app.majorminor.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}</app.majorminor.version>
		<app.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</app.version>
		<!--<app.version>${project.version}</app.version>-->
		<buildDate>${maven.build.timestamp}</buildDate>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
		<jdk-home>${JAVA_HOME}</jdk-home>
		<scala.majorversion>2.13</scala.majorversion>
		<scala.version>2.13.12</scala.version>
		<akkaHttp.version>10.5.3</akkaHttp.version>
		<javafx.version>21.0.1</javafx.version>
		<akka.version>2.8.5</akka.version>
		<scalafx.version>21.0.0-R32</scalafx.version>
		<!--scalafx.version>20.0.0-R31</scalafx.version-->
		<scalatest.version>3.3.0-SNAP4</scalatest.version>
		<scala-maven-plugin.version>4.8.1</scala-maven-plugin.version>
		<gatling.version>3.9.5</gatling.version>
		<gatling-plugin.version>4.3.7</gatling-plugin.version>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<scoverage.plugin.version>1.4.11</scoverage.plugin.version>
		<project-info-reports.plugin.version>3.0.0</project-info-reports.plugin.version>
		<site.plugin.version>3.12.1</site.plugin.version>
		<maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
		<slick.version>3.4.1</slick.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scalafx</groupId>
			<artifactId>scalafx_${scala.majorversion}</artifactId>
			<version>${scalafx.version}</version>
		</dependency>

		<!-- for JDK11 relevant (not an option: javapackager is removed but needed) -->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-base</artifactId>
			<version>${javafx.version}</version>
			<classifier>${javafx.os}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${javafx.version}</version>
			<classifier>${javafx.os}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
			<version>${javafx.version}</version>
			<classifier>${javafx.os}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>${javafx.version}</version>
			<classifier>${javafx.os}</classifier>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
			<version>${javafx.version}</version>
			<classifier>${javafx.os}</classifier>
		</dependency>

		<dependency>
			<groupId>org.controlsfx</groupId>
			<artifactId>controlsfx</artifactId>
			<version>11.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.39.3.0</version> <!-- next version brings regression reading null BigInteger fields - according to slick docu, the sqllite driver doesn't support bigedecimal anymore -->
			<!--version>3.44.0.0</version-->
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.5.1</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.slick</groupId>
			<artifactId>slick-hikaricp_${scala.majorversion}</artifactId>
			<version>${slick.version}</version>
		</dependency>
		<dependency>
			<groupId>org.simplejavamail</groupId>
			<artifactId>simple-java-mail</artifactId>
			<version>8.3.1</version>
		</dependency>

		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>5.1.0</version>
		</dependency>

		<!-- akka / akkahttp -->
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http_${scala.majorversion}</artifactId>
			<version>${akkaHttp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http-spray-json_${scala.majorversion}</artifactId>
			<version>${akkaHttp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http-xml_${scala.majorversion}</artifactId>
			<version>${akkaHttp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http-testkit_${scala.majorversion}</artifactId>
			<version>${akkaHttp.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-stream-testkit_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-stream_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-cluster_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-cluster-tools_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>fr.davit</groupId>
			<artifactId>akka-http-metrics-prometheus_${scala.majorversion}</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- Event Sourcing, Akka Persitence -->
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		<dependency>
			<groupId>org.fusesource.leveldbjni</groupId>
			<artifactId>leveldbjni-all</artifactId>
			<version>1.8</version>
		</dependency>
		<dependency>
			<groupId>com.twitter</groupId>
			<artifactId>chill-akka_${scala.majorversion}</artifactId>
			<version>0.10.0</version>
		</dependency>

		<!-- JWT actually substituted by a local pach-copy until 2.13 is suppored -->
<!--		<dependency>-->
<!--			<groupId>com.jason-goodwin</groupId>-->
<!--			<artifactId>authentikat-jwt_${scala.majorversion}</artifactId>-->
<!--			<version>0.4.5</version>-->
<!--		</dependency>-->
		<!-- https://mvnrepository.com/artifact/org.json4s/json4s-native -->
		<dependency>
			<groupId>org.json4s</groupId>
			<artifactId>json4s-native_${scala.majorversion}</artifactId>
			<version>4.0.6</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.json4s/json4s-jackson -->
		<dependency>
			<groupId>org.json4s</groupId>
			<artifactId>json4s-jackson_${scala.majorversion}</artifactId>
			<version>4.0.6</version>
		</dependency>

		<!-- Slick -->
		<dependency>
			<groupId>com.typesafe.slick</groupId>
			<artifactId>slick_${scala.majorversion}</artifactId>
			<version>${slick.version}</version>
		</dependency>

		<!-- QRCode -->
		<dependency>
			<groupId>net.glxn</groupId>
			<artifactId>qrgen</artifactId>
			<version>1.4</version>
		</dependency>
		<!-- proxy -->
		<dependency>
			<groupId>com.github.markusbernhardt</groupId>
			<artifactId>proxy-vole</artifactId>
			<version>1.0.5</version>
		</dependency>
        <!-- https://mvnrepository.com/artifact/org.javadelight/delight-nashorn-sandbox -->
        <dependency>
            <groupId>org.javadelight</groupId>
            <artifactId>delight-nashorn-sandbox</artifactId>
            <version>0.2.5</version>
        </dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.6</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.4.5</version>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-slf4j_${scala.majorversion}</artifactId>
			<version>${akka.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.15</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.10.0</version>
		</dependency>

		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_${scala.majorversion}</artifactId>
			<version>${scalatest.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
	        <groupId>io.gatling.highcharts</groupId>
	        <artifactId>gatling-charts-highcharts</artifactId>
	        <version>${gatling.version}</version>
	        <scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/application.conf</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/application.conf</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
	        <plugin>
	            <groupId>io.gatling</groupId>
	            <artifactId>gatling-maven-plugin</artifactId>
                <version>${gatling-plugin.version}</version>
	        </plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
				<configuration>
					<includes>
						<include>**/*Suite.class</include>
						<include>**/*Test.class</include>
						<include>**/*Tests.class</include>
						<include>**/*Spec.class</include>
						<include>**/*Specs.class</include>
					</includes>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.scalatest</groupId>
				<artifactId>scalatest-maven-plugin</artifactId>
				<version>2.2.0</version>
				<configuration>
					<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
					<junitxml>.</junitxml>
					<filereports>WDF TestSuite.txt</filereports>
				</configuration>
				<executions>
					<execution>
						<id>test</id>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.scoverage</groupId>
				<artifactId>scoverage-maven-plugin</artifactId>
				<version>${scoverage.plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
							<goal>parse-version</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/scala</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/scala</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.6.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<!-- configure the plugin here -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
				<version>${scala-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>scala-compile-first</id>
						<phase>process-resources</phase>
						<goals>
							<goal>add-source</goal>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>scala-test-compile</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<recompileMode>all</recompileMode>
					<compileOrder>JavaThenScala</compileOrder>
					<args>
						<arg>-unchecked</arg>
						<arg>-deprecation</arg>
						<arg>-explaintypes</arg>
						<arg>-feature</arg>
						<arg>-language:implicitConversions</arg>
						<arg>-language:postfixOps</arg>
						<arg>-language:existentials</arg>
						<arg>-g:line</arg>
					</args>
					<javacArgs>
						<javacArg>-Xlint:unchecked</javacArg>
						<javacArg>-Xlint:deprecation</javacArg>
					</javacArgs>
					<jvmArgs>
						<jvmArg>-server</jvmArg>
						<jvmArg>-Xss2m</jvmArg>
						<jvmArg>-XX:+UseParallelGC</jvmArg>
						<jvmArg>-XX:MaxInlineLevel=20</jvmArg>
					</jvmArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.11</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.1</version>
				<executions>
					<execution>
						<id>package-main-jar</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/package</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>*.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>package-dep-libs</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/package/libs</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/dependency</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>package-binary-distro</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${jdk-home}/bin/jpackage</executable>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>${site.plugin.version}</version>
			</plugin>
		</plugins>
		<extensions>
		</extensions>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
				<version>${scala-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.scoverage</groupId>
				<artifactId>scoverage-maven-plugin</artifactId>
				<version>${scoverage.plugin.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>report</report> <!-- select only one report from: report, integration-report and report-only reporters -->
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>
