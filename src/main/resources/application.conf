akka {
  http {
    server {
      server-header = "kutuapp"
      remote-address-header = true
      //    max-connections = 20
      //    request-timeout = 30 seconds
    }
    //  client.connecting-timeout = 15 min
    //  host-connection-pool.max-open-requests=256
    //  host-connection-pool.max-connections=20
  }

  # Protobuf serialization for persistent messages
  actor {
    allow-java-serialization = off
    enable-additional-serialization-bindings = on
//    warn-about-java-serializer-usage = off
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
      akka-persistence-snapshot = "akka.persistence.serialization.SnapshotSerializer"
      akka-persistence-message = "akka.persistence.serialization.MessageSerializer"
//      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "akka.persistence.serialization.Snapshot" = kryo // akka-persistence-snapshot
      "akka.persistence.serialization.Message" = kryo // akka-persistence-message
    }
  }

  persistence {
    journal {
      # Maximum size of a persistent message batch written to the journal.
      max-message-batch-size = 200
      # Maximum size of a confirmation batch written to the journal.
      max-confirmation-batch-size = 10000
      # Maximum size of a deletion batch written to the journal.
      max-deletion-batch-size = 10000
      # Path to the journal plugin to be used
      plugin = "akka.persistence.journal.leveldb"
      # In-memory journal plugin.
      inmem {
        # Class name of the plugin.
        class = "akka.persistence.journal.inmem.InmemJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"
      }
      # LevelDB journal plugin.
      leveldb {
        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.LeveldbJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
        # Dispatcher for message replay.
        replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
        # Storage location of LevelDB files.
//        dir = "journal_${app.majorminor.version}"
        # Use fsync on write
        fsync = on
        # Verify checksum on read.
        checksum = off
        # Native LevelDB (via JNI) or LevelDB Java port
        native = on
      }

      # Shared LevelDB journal plugin (for testing only).
      leveldb-shared {
        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.SharedLeveldbJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"
        # timeout for async journal operations
        timeout = 10s
        store {
          # Dispatcher for shared store actor.
          store-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
          # Dispatcher for message replay.
          replay-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
          # Storage location of LevelDB files.
          dir = "journal_${app.majorminor.version}"
          # Use fsync on write
          fsync = on
          # Verify checksum on read.
          checksum = off
          # Native LevelDB (via JNI) or LevelDB Java port
          native = on
        }
      }
    }

    snapshot-store {
      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"
      # Local filesystem snapshot store plugin.
      local {
        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"
        # Storage location of snapshot files.
//        dir = "snapshots_${app.majorminor.version}"
      }
    }
  }
}
http {
  interface = "0.0.0.0"
}

jwt {
  tokenExpiryPeriodInDays = 1
  algorithm = HS512
  contenttype = application/json
}

app {
  fullversion = "${app.version}"
  majorversion = "${app.majorminor.version}"
  builddate = "${buildDate}"
  remote {
    schema = "https"
    hostname = "kutuapp.sharevic.net"
    port = 443
  }
}
