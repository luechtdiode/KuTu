pekko {
  event-handlers = ["org.apache.pekko.event.slf4j.Slf4jEventHandler"]
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = INFO
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  stdout-loglevel = "WARNING"

  http {
    server {
      parsing {
        illegal-header-warnings = on
        ignore-illegal-header-for = ["accept-language", "user-agent"]
      }
      server-header = "kutuapp"
      remote-address-header = true
      # max-connections = 20
      request-timeout = 60 seconds
      idle-timeout = infinite
    }
    client {
      idle-timeout = infinite
      # connecting-timeout = 15 min
    }
    # host-connection-pool.max-open-requests=256
    # host-connection-pool.max-connections=20
  }

  # Kyro serialization for persistent messages
  actor {
    allow-java-serialization = off
    enable-additional-serialization-bindings = on
    # warn-about-java-serializer-usage = off
    serializers {
      kryo = "io.altoo.serialization.kryo.pekko.PekkoKryoSerializer"
      pekko-persistence-snapshot = "org.apache.pekko.persistence.serialization.SnapshotSerializer"
      pekko-persistence-message = "org.apache.pekko.persistence.serialization.MessageSerializer"
    }
    serialization-bindings {
      "ch.seidel.kutu.akka.KutuAppProtokoll" = kryo
      "ch.seidel.kutu.akka.CompetitionState" = kryo
      "ch.seidel.kutu.akka.RegistrationState" = kryo
    }
  }

  extensions = [org.apache.pekko.persistence.Persistence]
  persistence {
    journal {
      # Maximum size of a persistent message batch written to the journal.
      max-message-batch-size = 200
      # Maximum size of a confirmation batch written to the journal.
      max-confirmation-batch-size = 10000
      # Maximum size of a deletion batch written to the journal.
      max-deletion-batch-size = 10000
      # Path to the journal plugin to be used
      # pekko.persistence.journal.plugin="pekko.persistence.journal.leveldb"
      # pekko.persistence.journal.plugin="pekko.persistence.journal.inmem"
      plugin = "pekko.persistence.journal.leveldb"
      # In-memory journal plugin.
      inmem {
        # Class name of the plugin.
        class = "org.apache.pekko.persistence.journal.inmem.InmemJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "pekko.persistence.dispatchers.default-plugin-dispatcher"
      }
      # LevelDB journal plugin.
      leveldb {
        # Class name of the plugin.
        class = "org.apache.pekko.persistence.journal.leveldb.LeveldbJournal"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "pekko.persistence.dispatchers.default-plugin-dispatcher"
        # Dispatcher for message replay.
        replay-dispatcher = "pekko.persistence.dispatchers.default-replay-dispatcher"
        # Storage location of LevelDB files.
        # dir = "journal_${app.majorminor.version}"
        # Use fsync on write
        fsync = on
        # Verify checksum on read.
        checksum = off
        # Native LevelDB (via JNI) or LevelDB Java port
        native = on
      }
    }

    snapshot-store {
      # Path to the snapshot store plugin to be used
      plugin = "pekko.persistence.snapshot-store.local"
      # Local filesystem snapshot store plugin.
      local {
        # Class name of the plugin.
        class = "org.apache.pekko.persistence.snapshot.local.LocalSnapshotStore"
        # Dispatcher for the plugin actor.
        plugin-dispatcher = "pekko.persistence.dispatchers.default-plugin-dispatcher"
        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "pekko.persistence.dispatchers.default-stream-dispatcher"
        # Storage location of snapshot files.
        # dir = "snapshots_${app.majorminor.version}"
      }
    }
  }
}
http {
  interface = "0.0.0.0"
}

jwt {
  tokenExpiryPeriodInDays = 1
  algorithm = HS512
  contenttype = application/json
}

app {
  fullversion = "${app.version}"
  majorversion = "${app.majorminor.version}"
  builddate = "${buildDate}"
  import.data.fromversion = "2.2"
  smtpsender {
    appname = "KuTu App"
    appname = ""${?X_SMTP_SENDERAPPNAME}""
  }
  remote {
    schema = "https"
    hostname = "kutuapp.sharevic.net"
    hostnames = [
      "kutuapp.sharevic.net",
      "test-kutuapp.sharevic.net"
    ]
    port = 443
  }
}
